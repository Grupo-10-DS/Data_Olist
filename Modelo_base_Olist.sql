-- MySQL Script generated by MySQL Workbench
-- Wed Jul 13 17:25:59 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Olist
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Olist` ;

-- -----------------------------------------------------
-- Schema Olist
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Olist` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `Olist` ;

-- -----------------------------------------------------
-- Table `geolocation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geolocation` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `geolocation` (
  `geolocation_id` INT  NOT NULL,
  `geolocation_zip_code_prefix` INT NOT NULL,
  `geolocation_lat` DOUBLE NOT NULL,
  `geolocation_lng` DOUBLE NOT NULL,
  `geolocation_city` VARCHAR(255) NOT NULL,
  `geolocation_state` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`geolocation_id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customer` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `customer` (
  `customer_id` VARCHAR(255) NOT NULL,
  `customer_unique_id` VARCHAR(255) NOT NULL,
  `geolocation_id` INT  NOT NULL,
  PRIMARY KEY (`customer_id`),
  CONSTRAINT `geolocation_id`
    FOREIGN KEY (`geolocation_id`)
    REFERENCES `geolocation` (`geolocation_id`))
   -- ON DELETE NO ACTION
    -- ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE UNIQUE INDEX `customer_id_UNIQUE` ON `customer` (`customer_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `geolocation_id_idx` ON `customer` (`geolocation_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `order_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order_status` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `order_status` (
  `order_status_id` INT NOT NULL,
  `order_status` VARCHAR(45) NULL,
  PRIMARY KEY (`order_status_id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `order` (
  `order_id` VARCHAR(255) NOT NULL,
  `customer_id` VARCHAR(255) NOT NULL,
  `order_status_id` INT NOT NULL,
  `order_purchase_timestamp` DATETIME NOT NULL,
  `order_approved_at` DATETIME NOT NULL,
  `order_delivered_carrier_date` DATETIME NOT NULL,
  `order_delivered_customer_date` DATETIME NOT NULL,
  `order_estimated_delivery_date` DATETIME NOT NULL,
  PRIMARY KEY (`order_id`),
  CONSTRAINT `fk_order_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customer` (`customer_id`),
    -- ON DELETE NO ACTION
    -- ON UPDATE NO ACTION,
  CONSTRAINT `order_status_id`
    FOREIGN KEY (`order_status_id`)
    REFERENCES `order_status` (`order_status_id`))
    -- ON DELETE NO ACTION
    -- ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE UNIQUE INDEX `order_id_UNIQUE` ON `order` (`order_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `fk_order_customer_idx` ON `order` (`customer_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `order_status_id_idx` ON `order` (`order_status_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `product_category_name`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product_category_name` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `product_category_name` (
  `product_category_name_id` INT NOT NULL,
  `category_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`product_category_name_id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `product` (
  `product_id` VARCHAR(255) NOT NULL,
  `product_category_name_id` INT NOT NULL,
  `product_name_lenght` INT UNSIGNED NOT NULL,
  `product_description_lenght` INT UNSIGNED NULL,
  `product_photos_qty` INT UNSIGNED NULL,
  `product_weight_g` INT UNSIGNED NULL,
  `product_length_cm` INT UNSIGNED NULL,
  `product_height_cm` INT UNSIGNED NULL,
  `product_width_cm` INT UNSIGNED NULL,
  PRIMARY KEY (`product_id`),
  CONSTRAINT `product_category_name_id`
    FOREIGN KEY (`product_category_name_id`)
    REFERENCES `product_category_name` (`product_category_name_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE UNIQUE INDEX `product_id_UNIQUE` ON `product` (`product_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `product_category_name_id_idx` ON `product` (`product_category_name_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `seller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `seller` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `seller` (
  `seller_id` VARCHAR(255) NOT NULL,
  `geolocation_id` INT NOT NULL,
  PRIMARY KEY (`seller_id`),
  CONSTRAINT `geolocation-id`
    FOREIGN KEY (`geolocation_id`)
    REFERENCES `geolocation` (`geolocation_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE UNIQUE INDEX `seller_id_UNIQUE` ON `seller` (`seller_id` ASC) VISIBLE;

SHOW WARNINGS;
--  INDEX `geolocation_id_idx` ON `seller` (`geolocation_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `item`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `item` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `item` (
  `order_id` VARCHAR(255) NOT NULL,
  `order_item_id` VARCHAR(255) NOT NULL,
  `product_id` VARCHAR(255) NOT NULL,
  `seller_id` VARCHAR(255) NOT NULL,
  `shipping_limit_date` DATETIME NOT NULL,
  `price` FLOAT NOT NULL,
  `freight_value` FLOAT NOT NULL)
  -- CONSTRAINT `order_id` 
-- OREIGN KEY (`order_id`)
    -- REFERENCES `order` (`order_id`)
    -- ON DELETE NO ACTION
   --  ON UPDATE NO ACTION,
 --  CONSTRAINT `product_id`
   --  FOREIGN KEY (`product_id`)
    -- REFERENCES `product` (`product_id`)
    -- ON DELETE NO ACTION
   --  ON UPDATE NO ACTION,
 --  CONSTRAINT `seller_id`
    -- FOREIGN KEY (`seller_id`)
  --   REFERENCES `seller` (`seller_id`)
    -- ON DELETE NO ACTION
    -- ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE INDEX `order_id_idx` ON `item` (`order_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `product_id_idx` ON `item` (`product_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `seller_id_idx` ON `item` (`seller_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `review` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `review` (
  `review_id` VARCHAR(255) NOT NULL,
  `order_id` VARCHAR(255) NOT NULL,
  `review_score` INT UNSIGNED NULL,
  `review_comment_title` TINYTEXT NULL,
  `review_comment_message` LONGTEXT NULL,
  `review_creation_date` DATE NOT NULL,
  `review_answer_timestamp` DATETIME NOT NULL,
  PRIMARY KEY (`review_id`),
  CONSTRAINT `order-id`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE UNIQUE INDEX `order_id_UNIQUE` ON `review` (`order_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `payment_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `payment_type` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `payment_type` (
  `payment_type_id` INT NOT NULL,
  `payment_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`payment_type_id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `payment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `payment` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `payment` (
  `order_id` VARCHAR(255) NOT NULL,
  `payment_sequential` INT UNSIGNED NOT NULL,
  `payment_type_id` INT NOT NULL,
  `payment_installments` INT UNSIGNED NOT NULL,
  `payment_value` FLOAT UNSIGNED NOT NULL,
  CONSTRAINT `payment_type`
    FOREIGN KEY (`payment_type_id`)
    REFERENCES `payment_type` (`payment_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `order.id`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
-- CREATE INDEX `payment_type_idx` ON `payment` (`payment_type_id` ASC) VISIBLE;

SHOW WARNINGS;
-- CREATE INDEX `order_id_idx` ON `payment` (`order_id` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `product_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product_info` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `product_info` (
  `product_category_name` VARCHAR(255) NOT NULL,
  `product_category_name_english` VARCHAR(255) NOT NULL)
ENGINE = InnoDB;

SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
